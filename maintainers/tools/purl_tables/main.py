#!/usr/bin/env python3

"""Tool for updating the tables for PURL."""

import argparse
import json
import os
import sys

from typing import List
from urllib.parse import quote


def _percent_encode(s: str) -> str:
    """
    Percent-encodes a character according to the [PURL specification](https://github.com/package-url/purl-spec/blob/main/PURL-SPECIFICATION.rst#character-encoding).
    """

    try:
        return quote(s, encoding=None).replace("%3A", ":")
    except:
        return None


def _run(args) -> int:
    lc_all = os.environ.get("LC_ALL")
    if lc_all != "en_US.UTF-8":
        print("Your environment settings will reorder the file badly.")
        print("Please rerun as:")
        print('  LC_ALL="en_US.UTF-8"', " ".join(sys.argv))
        return 0

    percent_encoding_tests = [
        "foo",
        "Hello, World!",
        "path: /foo",
        # German
        "München",
        "Köln",
        # Swedish
        "Småland",
        # French
        "française",
        # Spanish
        "¡Hola Mundo!",
        # Arabic
        "مرحبا بالعالم!",
        # Chinese
        "你好世界！",
        # Japanese
        "こんにちは世界！",
        # Emoji,
        "🙎",
        "🙊",
        # Emoji with modifiers.
        str(
            b"\xf0\x9f\x99\x8e\xf0\x9f\x8f\xbe\xe2\x80\x8d\xe2\x99\x80\xef\xb8\x8f",
            "utf8",
        ),
    ]

    tables = {
        "percent_encoding": {
            "encode": {str(i): _percent_encode(bytes([i])) for i in range(0, 256, 1)},
            "tests": {s: _percent_encode(s) for s in percent_encoding_tests},
        },
    }

    with open(args.output, "w") as f:
        # Json-encode twice to get a valid Starlark string for the JSON object.
        f.write(
            f"""
# Generated by maintainers/tools/purl_tables/main.py. DO NOT EDIT.

visibility([
    "//purl/...",
])

tables = json.decode({json.dumps(json.dumps(tables))})
""".strip()
        )
        f.write("\n")

    return 0


def main(argv: List[str]) -> int:
    """Main program.
    Args:
      argv: command-line arguments, such as sys.argv (including the program name
      in argv[0]).
    Returns:
      Zero on successful program termination, non-zero otherwise.
    """

    parser = argparse.ArgumentParser(description="Update tables for PURL.")
    parser.add_argument("--output", required=True, help="The .bzl file to write to.")

    return _run(parser.parse_args(argv[1:]))


if __name__ == "__main__":
    sys.exit(main(sys.argv))
